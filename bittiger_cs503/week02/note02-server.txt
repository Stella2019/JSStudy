cd oj-server

npm init

package.json is created

{
  "name": "oj-server",
  "version": "0.0.1",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}


//now we want to use express to write the webserver

npm install --save express

+ express@4.16.3

{
  "name": "oj-server",
  "version": "0.0.1",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.16.3"
  }
}

copy .gitignore to week02

//then change
from:
# dependencies
/node_modules
to:
# dependencies
node_modules/

//now all the node_modules in the both oj-client and oj-server will be ignored



create server.js

// copy express hello world code from express website

// introduce nodemon

npm install -g nodemon

nodemon server.js

//autosave plugin, every ';'

//we want the server able to deal with different url:

GET /problems
Post /problems
GET /problems/:id

//we want the server able to receive and process corresponding url

create folder routes
create routes/rest.js

//we want the rest.js to process all RESTful API

//google search "express router"

rest.js

// process HTTP GET request
// add a callback function, with 2 params: req, res
// this is only the router, we want it only does the routing
// we want the computation done in other place, as "service"
var express = require('express');
var router = express.Router();
router.get('/problems', function (req, res) {

});


create folder services
create services/problemService.js

rest.js
// process HTTP GET request
// add a callback function, with 2 params: req, res
// this is only the router, we want it only does the routing
// we want the computation done in other place, as "service"
// then is a promise
// get a problem list: problems
// send the problem list to res
router.get('/problems', function (req, res) {
  problemService.getProblems()
    .then(problems => res.json(problems));
});

// To get the router:
server.js
var restRouter = require("./routes/rest");


// To use the router:
var app = express()
app.use("/api/v1", restRouter);

problemService.js
// we need to return a Promise.
// we are going to pass a funciton, resolve, reject
//
var getProblems = function () {
  return new Promise((resolve, reject) => {
    resolve(problems);
  });
};

// now we need the "problems"
problemService.js
var problems = [];

// To make this method in this module available to others
module.exports = {
  getProblems: getProblems
}

// we write it as a Promise because we are going to communicate with db later

// now the server can be run without database
// using postman
GET: localhost:3000/api/v1/problems
Show: [
          {
              "id": 1,
              "name": "Two Sum",
              "desc": "Gi..........

///////////////////////////////////////////////////////////

// Now we start to work on single problem
rest.js

router.get("/problems/:id");


router.post("/problems");


router.get('/problems/:id', function (req, res) {
  var id = req.params.id;
  problemService.getProblem(+id)
    .then(problem => res.json(problem));
});
// +id convert string to number


// write getProblem in problemService.js
problemService.js

var getProblem = function (id) {
  return new Promise((resolve, reject) => {
      resolve(problem);
  });
};

// Now single problem works:
localhost:3000/api/v1/problems/1
Show:
{
    "id": 1,
    "name": "Two Sum",
    "desc": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.",
    "difficulty": "easy"
}

////////////////////////////////////////////////////
// write the post method in rest.js
// to create new questions
rest.js

//in the :bittiger_cs503/week02/oj-client/src/app/components/new-problem/new-problem.component.ts:

  addProblem(): void {
    //data.addProblem shall be in the data service
    this.data.addProblem(this.newProblem);
    // this.data.addProblem(this.newProblem)
    //   .catch(error => console.log(error._body));

    // clear the form for next input
    this.newProblem = Object.assign({}, DEFAULT_PROBLEM);
  }

// data service pass a object, which is the content of new problem

// So now we want the client sent a JSON file to the server
// The server shall be able to parse JSON file
npm install --save body-parser

  "dependencies": {
    "body-parser": "^1.18.3",
    "express": "^4.16.3"
  }

// to use the body-parser
rest.js

var bodyParser = require("body-parser");
var jsonParser = bodyParser.json();

router.post("/problems", jsonParser, function(req, res) {
  problemService.addProblem(req.body)
    .then(function (problem) {
      res.json(problem);
    }, function (error) {
      res.status(400).send("Problem name already exists");
    });
});


// Now create problemService.addProblem
problemService.js

var addProblem = function (newProblem) {
  return new Promise((resolve, reject) => {
    if (problems.find(problem => problem.name === newProblem.name)) {
        reject("Problem already exists");
    } else {
        newProblem.id = problems.length + 1;
        problems.push(newProblem);
        resolve(newProblem);
    }
  });
};



// now use postman to try:

POST: localhost:3000/api/v1/problems

body/raw/JSON

{
    "name": "6th name",
    "desc": "6th desc",
    "difficulty": "super"
}

////////////////////////////////////////////////////

// Now new added problem will be lost after restart server

// now we use MongoDB

// There is a online mongoDB: mLab

////////////////////////////////////////////////////
// I decided to install mongoDB on ubuntu

Install MongoDB Community Edition

https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/

1. Import the public key used by the package management system.¶
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4

2. Create a list file for MongoDB.¶
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list


3. Reload local package database.¶
sudo apt-get update

4. Install the MongoDB packages.¶
sudo apt-get install -y mongodb-org

 mongod --version
db version v4.0.0


install mongodb gui
Studio 3T
https://robomongo.org/

1. Start MongoDB.¶
sudo service mongod start


2. Verify that MongoDB has started successfully
Verify that the mongod process has started successfully by checking the contents of the log file at /var/log/mongodb/mongod.log

3. Stop MongoDB.¶
sudo service mongod stop

4. Restart MongoDB.¶
sudo service mongod restart

5. Begin using MongoDB.¶
Start a mongo shell on the same host machine as the mongod. Use the --host command line option to specify the localhost address and port that the mongod listens on:
mongo --host 127.0.0.1:27017









////////////////////////////////////////////////////

// Also try docker on ubuntu

Get Docker CE for Ubuntu
https://docs.docker.com/install/linux/docker-ce/ubuntu/#os-requirements

sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -





////////////////////////////////////////////////////
// connect to mongodb
// npm install --save mongoose

+ mongoose@5.2.4

server.js
var mongoose = require("mongoose");

// connect to mongodb server
mongo --port 27017

// create database
use ojdb

// create user
db.createUser(
   {
     user: "zhu",
     pwd: "dockermongoass",
     roles: [ "readWrite", "dbAdmin" ]
   }
)

// connect to mongodb

////////////////////////////////////////////////////


db.cities.find()




////////////////////////////////////////////////////
use docker to run mongodb:
https://www.thachmai.info/2015/04/30/running-mongodb-container/



mkdir ~/data

sudo docker run -d -p 27017:27017 -v ~/data:/data/db mongo

or

 sudo docker run --name mongodb bitnami/mongodb:latest


 Install the MongoDB client
sudo apt-get install mongodb-clients

# Change mydb to the name of your DB
mongo localhost/mydb

////////////////////////////////////////////////////

sudo service docker stop

sudo service docker start

sudo docker run -d -p 27017:27017 -v ~/data:/data/db mongo

mongo --port 27017


////////////////////////////////////////////////////



////////////////////////////////////////////////////